#!/bin/env python3
import math
import sys
from collections import namedtuple
from pathlib import Path

Edge = namedtuple("Edge", "weight risks")

# greatest common doomsday and weight
def gcd(graph, path1, path2):
    w1, d1 = get_weight_and_doomsday_scenarios(graph, path1)
    w2, d2 = get_weight_and_doomsday_scenarios(graph, path2)
    return d1 & d2, w1 + w2


def get_weight_and_doomsday_scenarios(graph, path):
    path, scenarios, weight = iter(path), set(), 0
    u = next(path)
    for v in path:
        edge = graph[u][v]
        scenarios.update(edge.risks)
        weight += edge.weight
        u = v
    return weight, scenarios


def parse_input(source):
    lines = (
        (line for line in source.strip().split("\n") if line)
        if isinstance(source, str)
        else iter(source)
    )
    n, m, q = map(int, next(lines).split())
    graph = {u: {} for u in range(1, n + 1)}
    for _ in range(m):
        u, v, w, _, *cs = map(int, next(lines).split())
        edge = Edge(w, frozenset(cs))
        graph[u][v] = edge
        graph[v][u] = edge
    queris = [tuple(map(int, next(lines).split())) for _ in range(q)]
    return graph, queris


def parse_output(number_of_queris: int, output):
    lines = (
        (line for line in output.strip().split("\n") if line)
        if isinstance(output, str)
        else iter(output)
    )
    solutions = []
    for _ in range(number_of_queris):
        path1 = list(map(int, next(lines).split()))[1:]
        path2 = list(map(int, next(lines).split()))[1:]
        solutions.append((path1, path2))
    return solutions


def solution_imperfection(graph, query, solution):
    if any(p[0] != query[0] or p[-1] != query[-1] for p in solution):
        return math.inf
    scenarios, weight = gcd(graph, *solution)
    return len(scenarios) * 400 * len(graph) + weight


def solutions_imperfections(graph, queris, solutions):
    for query, solution in zip(queris, solutions):
        yield solution_imperfection(graph, query, solution)


_, input_path, output_path = map(Path, sys.argv)
inp = input_path.read_text().strip().split("\n")
graph, queris = parse_input(input_path.read_text())
solutions = parse_output(len(queris), output_path.read_text())
for q, s in zip(queris, solutions):
    print("", *q, "->", *s)

total = 0
print(" --- scores --- ")
for query, imperfection in zip(
    queris, solutions_imperfections(graph, queris, solutions)
):
    print(query, imperfection)
    total += imperfection
print("TOTAL: ", total)
